 upstream hydra_server {
   # fail_timeout=0 means we always retry an upstream even if it failed
   # to return a good HTTP response (in case the Unicorn master nukes a
   # single worker for timing out).

   # for UNIX domain socket setups:
   server unix:/data0/hydra/shared/sockets/puma.sock fail_timeout=0;
 }

 server {
   listen 80 default_server;

   # If you have IPv6, you'll likely want to have two separate listeners.
   # One on IPv4 only (the default), and another on IPv6 only instead
   # of a single dual-stack listener.  A dual-stack listener will make
   # for ugly IPv4 addresses in $remote_addr (e.g ":ffff:10.0.0.1"
   # instead of just "10.0.0.1") and potentially trigger bugs in
   # some software.
   listen [::]:80 default_server;

   client_max_body_size 4G;
   proxy_read_timeout 600s;
   client_body_temp_path /data0/hydra/shared/tmp/nginx/client_temp 1 2;
   #server_name blah;

   # ~2 seconds is often enough for most folks to parse HTML/CSS and
   # retrieve needed images/icons/frames, connections are cheap in
   # nginx so increasing this is generally safe...
   keepalive_timeout 5;

   # path for static files
   root /data0/hydra/current/public;

   try_files $uri @app;

   # Turn off gzip to support etags
   gzip on;
   location @app {
     # an HTTP header important enough to have its own Wikipedia entry:
     #   http://en.wikipedia.org/wiki/X-Forwarded-For
     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

     # enable this if you forward HTTPS traffic to unicorn,
     # this helps Rack set the proper URL scheme for doing redirects:
     # proxy_set_header X-Forwarded-Proto $scheme;

     # pass the Host: header from the client right along so redirects
     # can be set properly within the Rack application
     proxy_set_header Host $http_host;

     # we don't want nginx trying to do something clever with
     # redirects, we set the Host: header above already.
     proxy_redirect off;

     # set "proxy_buffering off" *only* for Rainbows! when doing
     # Comet/long-poll/streaming.  It's also safe to set if you're using
     # only serving fast clients with Unicorn + nginx, but not slow
     # clients.  You normally want nginx to buffer responses to slow
     # clients, even with Rails 3.1 streaming because otherwise a slow
     # client can become a bottleneck of Unicorn.
     #
     # The Rack application may also set "X-Accel-Buffering (yes|no)"
     # in the response headers do disable/enable buffering on a
     # per-response basis.
     # proxy_buffering off;

     proxy_pass http://hydra_server;
   }

   # Rails error pages
   error_page 500 502 503 504 /500.html;
   location = /500.html {
     root /data0/hydra/current/public;
   }
 }
